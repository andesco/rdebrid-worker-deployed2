/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root"
import { Route as AuthedRouteImport } from "./routes/_authed"
import { Route as AuthedIndexRouteImport } from "./routes/_authed/index"
import { Route as WatchSplatRouteImport } from "./routes/watch.$"
import { Route as AuthedViewRouteImport } from "./routes/_authed/view"
import { Route as AuthedTorrentsRouteImport } from "./routes/_authed/torrents"
import { Route as AuthedDownloadsRouteImport } from "./routes/_authed/downloads"
import { Route as AuthedDownloaderRouteImport } from "./routes/_authed/downloader"
import { Route as AuthedBtsearchRouteImport } from "./routes/_authed/btsearch"
import { Route as AuthedDownloaderTabIdRouteImport } from "./routes/_authed/downloader.$tabId"

const AuthedRoute = AuthedRouteImport.update({
  id: "/_authed",
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedIndexRoute = AuthedIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => AuthedRoute,
} as any)
const WatchSplatRoute = WatchSplatRouteImport.update({
  id: "/watch/$",
  path: "/watch/$",
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import("./routes/watch.$.lazy").then((d) => d.Route))
const AuthedViewRoute = AuthedViewRouteImport.update({
  id: "/view",
  path: "/view",
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedTorrentsRoute = AuthedTorrentsRouteImport.update({
  id: "/torrents",
  path: "/torrents",
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedDownloadsRoute = AuthedDownloadsRouteImport.update({
  id: "/downloads",
  path: "/downloads",
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedDownloaderRoute = AuthedDownloaderRouteImport.update({
  id: "/downloader",
  path: "/downloader",
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedBtsearchRoute = AuthedBtsearchRouteImport.update({
  id: "/btsearch",
  path: "/btsearch",
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedDownloaderTabIdRoute = AuthedDownloaderTabIdRouteImport.update({
  id: "/$tabId",
  path: "/$tabId",
  getParentRoute: () => AuthedDownloaderRoute,
} as any)

export interface FileRoutesByFullPath {
  "/btsearch": typeof AuthedBtsearchRoute
  "/downloader": typeof AuthedDownloaderRouteWithChildren
  "/downloads": typeof AuthedDownloadsRoute
  "/torrents": typeof AuthedTorrentsRoute
  "/view": typeof AuthedViewRoute
  "/watch/$": typeof WatchSplatRoute
  "/": typeof AuthedIndexRoute
  "/downloader/$tabId": typeof AuthedDownloaderTabIdRoute
}
export interface FileRoutesByTo {
  "/btsearch": typeof AuthedBtsearchRoute
  "/downloader": typeof AuthedDownloaderRouteWithChildren
  "/downloads": typeof AuthedDownloadsRoute
  "/torrents": typeof AuthedTorrentsRoute
  "/view": typeof AuthedViewRoute
  "/watch/$": typeof WatchSplatRoute
  "/": typeof AuthedIndexRoute
  "/downloader/$tabId": typeof AuthedDownloaderTabIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  "/_authed": typeof AuthedRouteWithChildren
  "/_authed/btsearch": typeof AuthedBtsearchRoute
  "/_authed/downloader": typeof AuthedDownloaderRouteWithChildren
  "/_authed/downloads": typeof AuthedDownloadsRoute
  "/_authed/torrents": typeof AuthedTorrentsRoute
  "/_authed/view": typeof AuthedViewRoute
  "/watch/$": typeof WatchSplatRoute
  "/_authed/": typeof AuthedIndexRoute
  "/_authed/downloader/$tabId": typeof AuthedDownloaderTabIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | "/btsearch"
    | "/downloader"
    | "/downloads"
    | "/torrents"
    | "/view"
    | "/watch/$"
    | "/"
    | "/downloader/$tabId"
  fileRoutesByTo: FileRoutesByTo
  to:
    | "/btsearch"
    | "/downloader"
    | "/downloads"
    | "/torrents"
    | "/view"
    | "/watch/$"
    | "/"
    | "/downloader/$tabId"
  id:
    | "__root__"
    | "/_authed"
    | "/_authed/btsearch"
    | "/_authed/downloader"
    | "/_authed/downloads"
    | "/_authed/torrents"
    | "/_authed/view"
    | "/watch/$"
    | "/_authed/"
    | "/_authed/downloader/$tabId"
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthedRoute: typeof AuthedRouteWithChildren
  WatchSplatRoute: typeof WatchSplatRoute
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_authed": {
      id: "/_authed"
      path: ""
      fullPath: ""
      preLoaderRoute: typeof AuthedRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/_authed/": {
      id: "/_authed/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof AuthedIndexRouteImport
      parentRoute: typeof AuthedRoute
    }
    "/watch/$": {
      id: "/watch/$"
      path: "/watch/$"
      fullPath: "/watch/$"
      preLoaderRoute: typeof WatchSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/_authed/view": {
      id: "/_authed/view"
      path: "/view"
      fullPath: "/view"
      preLoaderRoute: typeof AuthedViewRouteImport
      parentRoute: typeof AuthedRoute
    }
    "/_authed/torrents": {
      id: "/_authed/torrents"
      path: "/torrents"
      fullPath: "/torrents"
      preLoaderRoute: typeof AuthedTorrentsRouteImport
      parentRoute: typeof AuthedRoute
    }
    "/_authed/downloads": {
      id: "/_authed/downloads"
      path: "/downloads"
      fullPath: "/downloads"
      preLoaderRoute: typeof AuthedDownloadsRouteImport
      parentRoute: typeof AuthedRoute
    }
    "/_authed/downloader": {
      id: "/_authed/downloader"
      path: "/downloader"
      fullPath: "/downloader"
      preLoaderRoute: typeof AuthedDownloaderRouteImport
      parentRoute: typeof AuthedRoute
    }
    "/_authed/btsearch": {
      id: "/_authed/btsearch"
      path: "/btsearch"
      fullPath: "/btsearch"
      preLoaderRoute: typeof AuthedBtsearchRouteImport
      parentRoute: typeof AuthedRoute
    }
    "/_authed/downloader/$tabId": {
      id: "/_authed/downloader/$tabId"
      path: "/$tabId"
      fullPath: "/downloader/$tabId"
      preLoaderRoute: typeof AuthedDownloaderTabIdRouteImport
      parentRoute: typeof AuthedDownloaderRoute
    }
  }
}

interface AuthedDownloaderRouteChildren {
  AuthedDownloaderTabIdRoute: typeof AuthedDownloaderTabIdRoute
}

const AuthedDownloaderRouteChildren: AuthedDownloaderRouteChildren = {
  AuthedDownloaderTabIdRoute: AuthedDownloaderTabIdRoute,
}

const AuthedDownloaderRouteWithChildren =
  AuthedDownloaderRoute._addFileChildren(AuthedDownloaderRouteChildren)

interface AuthedRouteChildren {
  AuthedBtsearchRoute: typeof AuthedBtsearchRoute
  AuthedDownloaderRoute: typeof AuthedDownloaderRouteWithChildren
  AuthedDownloadsRoute: typeof AuthedDownloadsRoute
  AuthedTorrentsRoute: typeof AuthedTorrentsRoute
  AuthedViewRoute: typeof AuthedViewRoute
  AuthedIndexRoute: typeof AuthedIndexRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedBtsearchRoute: AuthedBtsearchRoute,
  AuthedDownloaderRoute: AuthedDownloaderRouteWithChildren,
  AuthedDownloadsRoute: AuthedDownloadsRoute,
  AuthedTorrentsRoute: AuthedTorrentsRoute,
  AuthedViewRoute: AuthedViewRoute,
  AuthedIndexRoute: AuthedIndexRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthedRoute: AuthedRouteWithChildren,
  WatchSplatRoute: WatchSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
